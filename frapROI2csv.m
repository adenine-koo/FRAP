%% Copyright: Adenine Koo, 2023, University of Wisconsin-Madison
% Email : skoo8@wisc.edu

%% For this function to work, user must also have these functions in
% the working directory:
% 1. nd2read.m
% 2. nd2finfo.m
% 3. motioncorrect.m
% nd2read and nd2finfo were modified from the same functions written by 
% Joe Yeh, 2019 to read through image stack/movie of single 
% fluorescent channel.

% MANUALLY CHANGE BLEACHING FRAME:
% Bleaching frame is set by default at frame #6, this parameter should be
% changed manually depends on user's experimental setting.

%% This function reads and converts nd2 file generated by ND Stimulation
% to a 3-D matrix of pixel values in uint16 for FRAP experiment.
% User will be prompted to select the nucleus (ROI1) and doughnut (ROI2)
% that were bleached, as well as an upper left point in the background to
% generate ROI3.
% The average pixel values of these ROIs will be calculated and output in
% a csv file.
% Optional: an avi file of the cropped doughnut could be saved if needed

% Syntax for generating csv files and cropped ROI movie
% frapROI2csv("infile.txt", buffer, 1);
% Syntax for generating csv files ONLY
% frapROI2csv("infile.txt", buffer, 0);

% First argument: infile.txt
% The first line of infile.txt specifies the data folder path to nd2 files 
% and timestamps.xlsx, nd2 files and timestamps.xlsx must be in the same 
% folder/path
% The second line of infile.txt lists the filename for timestamps.xlsx (a
% column of timestamps manually retrieved from image metadata, without
% header)
% From third line onward, each line corresponds to an nd2 file to be
% analysed
% Format of infile.txt:
% C:\Users\skoo8\Videos\230804 FRAP 2
% 230804-S001 Timestamps.xlsx
% L001
% L002
% L003
% ......

% Second argument: buffering window size for finding the best correlated 
% doughnut area, must be an INTEGER

% Third argument: savemovie true/false (TF)
% Choose 1 if movie of cropped ROI/doughnut is needed
% Choose 0 if movie is not needed

% Two types of outputs are stored in the data folder path containing input
% nd2 files and timestamps.xlsx
% 1. One csv file is generated for each input nd2 file
% 2. Specified by savemovie TF: one avi movie of the cropped ROI2/doughnut
% for each nd2 file
% Output filename format: 
% todaydate-nd2filename.csv; todaydate-nd2filename.avi


function frapROI2csv(inputFile, buffer, savemovie)

% Validate number of input arguments
narginchk(3, 3); % accepts exactly 3 inputs

% Open the input file for reading
fid = fopen(inputFile, "r");

% Read the first line of infile to get the path to the data folder storing
% the nd2 files
datafolderPath = fgetl(fid);
if ~strcmp(datafolderPath(end), "\")
    datafolderPath = strcat(datafolderPath, "\");
end % if ~strcmp

% Read the second line of infile to get the timestamps.xlsx file
% timestamps.xlsx has one column of timestamps for each frame, pasted from
% metadata exported from ImageJ, without header.
ts = fgetl(fid);
if ~strcmp(ts(end-4:end), ".xlsx")
    ts = strcat(ts, ".xlsx");
end % if ~strcmp
ts_path = strcat(datafolderPath, ts);
timestamps = readmatrix(ts_path);

% Read line by line from the third line of infile.txt and store it as a
% list of video names in a cell array
vv = 1;
while ~feof(fid)
    videonameList{vv} = fgetl(fid);
    if ~strcmp(videonameList{vv}(end-3:end), ".nd2")
        videonameList{vv} = strcat(videonameList{vv}, ".nd2");
    end % if ~strcmp
    vv = vv + 1;
end
fclose(fid);

% Number of sessions/videos/nd2 files
videoNum = length(videonameList);

for video = 1:videoNum
    currentvideo = videonameList{video};
    % Create path to nd2 file
    file = strcat(datafolderPath, currentvideo);

    % Create output csv file
    if isstring(currentvideo)
        currentvideo = convertStringsToChars(currentvideo);
    end % if isstring
    outfilename = strcat(datafolderPath, string(datetime("today")), ...
        "-", currentvideo(1:4), ".csv");

    % Create output avi file
    if savemovie == 1
        vfilename = strcat(datafolderPath, string(datetime("today")), ...
            "-", currentvideo(1:4), ".avi");
        v = VideoWriter(vfilename);
        open(v);
    end % if savemovie

    % Read images as pixel matrix
    [Ch1, ~, ~] = nd2read(file);

    % MANUALLY CHANGE BLEACHING FRAME HERE!!!
    % Bleaching occurred at the sixth frame by default, 
    % this parameter depends on experimental settings.
    bleachedFrame = 6;
    bleachedImage = Ch1(:, :, bleachedFrame);
    % Reference image for image stabilisation/offset correction
    % The last frame before bleaching was chosen by default
    refFrame = bleachedFrame - 1;
    refImage = Ch1(:, :, refFrame);

    % User draws the regions enclosing the nucleus of interest and bleached
    % doughnut
    % Also selects an upper left point to define the background region
    % (use eye judgment and make sure there is enough room at the right
    % hand side as the background --> no other signal)
    % Background region will be of the same size as the bleached doughnut
    figure(1)
    set(gcf, "WindowState", "maximized");
    subplot(1, 2, 1)
    imshow(refImage);
    title("Note the bleached doughnut from this reference");
    ax = subplot(1, 2, 2);
    imshow(bleachedImage);
    title("Select the nucleus of interest, double click when done");
    % User interactively places the ellipse enclosing the cell nucleus,
    % adjust the ellipse and double click when done
    nucleus = drawellipse(ax);
    nucleus = customWait(nucleus);
    % Create a mask from the nucleus ROI object
    ROI1mask = createMask(nucleus);

    figure(2)
    set(gcf, "WindowState", "maximized")
    imshow(bleachedImage)
    title("Select the bleached doughnut");
    % rectout format: [x, y, w, h];
    [doughnut, doughnutSpec] = imcrop(gcf);
    % Specify a target window size in the form [w, h]
    [H, W] = size(doughnut);

    figure(1)
    title("Select the upper left point for the background");
    % Get the upper left point of the background from the image by
    % double-click
    [UpperLeftX, UpperLeftY] = getpts;
    UpperLeftX = round(UpperLeftX);
    UpperLeftY = round(UpperLeftY);
    backgroundSpec = [UpperLeftX UpperLeftY W H];
    close all;

    % Calculate the average pixel values for each ROI
    % ROI1: Nucleus
    % ROI2: Bleached doughnut
    % ROI3: Background with the same size as bleached doughnut
    ImageNum = size(Ch1, 3);
    ROI1 = nan(ImageNum, 1);
    ROI2 = nan(ImageNum, 1);
    ROI3 = nan(ImageNum, 1);
    doughnutSpec = round(doughnutSpec);
    doughnutXCoor = [doughnutSpec(1), (doughnutSpec(1) + doughnutSpec(3))];
    doughnutYCoor = [doughnutSpec(2), (doughnutSpec(2) + doughnutSpec(4))];
    backgroundXCoor = [backgroundSpec(1), (backgroundSpec(1) + backgroundSpec(3))];
    backgroundYCoor = [backgroundSpec(2), (backgroundSpec(2) + backgroundSpec(4))];

    % Generate an output csv file for each video
    fid2 = fopen(outfilename, "w");
    fprintf(fid2, "%s\n", "Avg Signal");
    fprintf(fid2, "%s, %s, %s, %s\n", "Time", "ROI1", "ROI2", "ROI3");
    % Reference doughnut image for motion correction
    refDoughnut = refImage(doughnutYCoor(1):doughnutYCoor(2), doughnutXCoor(1):doughnutXCoor(2));
    for ii = 1:ImageNum
        currentImage = Ch1(:, :, ii);
        % Note: X = columns; Y = rows
        ROI1Area = double(currentImage).*ROI1mask;
        ROI1Area(ROI1Area == 0) = NaN;
        ROI1(ii) = mean(ROI1Area, "all", "omitnan");
        if ii <= 6
            ROI2Area = currentImage(doughnutYCoor(1):doughnutYCoor(2), doughnutXCoor(1):doughnutXCoor(2));
        else
            [bestdoughnutYCoor, bestdoughnutXCoor, ~] = motioncorrect(currentImage, refDoughnut, doughnutYCoor, doughnutXCoor, buffer);
            ROI2Area = currentImage(bestdoughnutYCoor(1):bestdoughnutYCoor(2), bestdoughnutXCoor(1):bestdoughnutXCoor(2));
        end % if ii
        if savemovie == 1
            writeVideo(v, im2double(ROI2Area));
        end % if savemovie
        ROI2(ii) = mean(ROI2Area, "all");
        ROI3Area = currentImage(backgroundYCoor(1):backgroundYCoor(2), backgroundXCoor(1):backgroundXCoor(2));
        ROI3(ii) = mean(ROI3Area, "all");

        % Write data to csv file
        fprintf(fid2, "%.4f, %.4f, %.4f, %.4f\n", timestamps(ii), ROI1(ii), ROI2(ii), ROI3(ii));
    end % for ii

    fclose(fid2);
    if savemovie == 1
        close(v);
    end % if savemovie
end % for video

end % for function frapROI2csv

function ROI = customWait(ROI)
% Listen for mouse clicks on the ROI
l = addlistener(ROI, "ROIClicked", @clickCallback);

% Block program execution
uiwait;

% Remove listener
delete(l);
end

function clickCallback(~, evt)
if strcmp(evt.SelectionType, "double")
    uiresume;
end
end
